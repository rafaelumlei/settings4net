// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

namespace settings4net.Core.APIClient.Models
{
    public partial class Setting
    {
        private string _application;

        /// <summary>
        /// Optional.
        /// </summary>
        public string Application
        {
            get { return this._application; }
            set { this._application = value; }
        }

        private DateTimeOffset? _created;

        /// <summary>
        /// Optional.
        /// </summary>
        public DateTimeOffset? Created
        {
            get { return this._created; }
            set { this._created = value; }
        }

        private string _documentation;

        /// <summary>
        /// Optional.
        /// </summary>
        public string Documentation
        {
            get { return this._documentation; }
            set { this._documentation = value; }
        }

        private string _environment;

        /// <summary>
        /// Optional.
        /// </summary>
        public string Environment
        {
            get { return this._environment; }
            set { this._environment = value; }
        }

        private string _fullpath;

        /// <summary>
        /// Optional.
        /// </summary>
        public string Fullpath
        {
            get { return this._fullpath; }
            set { this._fullpath = value; }
        }

        private JToken _jSONValue;

        /// <summary>
        /// Optional.
        /// </summary>
        public JToken JSONValue
        {
            get { return this._jSONValue; }
            set { this._jSONValue = value; }
        }

        private string _key;

        /// <summary>
        /// Optional.
        /// </summary>
        public string Key
        {
            get { return this._key; }
            set { this._key = value; }
        }

        private string _id;

        /// <summary>
        /// Optional.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }


        private DateTimeOffset? _updated;

        /// <summary>
        /// Optional.
        /// </summary>
        public DateTimeOffset? Updated
        {
            get { return this._updated; }
            set { this._updated = value; }
        }

        /// <summary>
        /// Initializes a new instance of the Setting class.
        /// </summary>
        public Setting()
        {
        }

        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type Setting
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Application != null)
            {
                outputObject["Application"] = this.Application;
            }
            if (this.Created != null)
            {
                outputObject["Created"] = this.Created.Value;
            }
            if (this.Documentation != null)
            {
                outputObject["Documentation"] = this.Documentation;
            }
            if (this.Environment != null)
            {
                outputObject["Environment"] = this.Environment;
            }
            if (this.Fullpath != null)
            {
                outputObject["Fullpath"] = this.Fullpath;
            }
            if (this.JSONValue != null)
            {
                // only after a forced parse the type of the JToken is inferred
                try
                {
                    outputObject["JSONValue"] = JToken.Parse(JsonConvert.SerializeObject(this.JSONValue));
                }
                catch
                {
                    outputObject["JSONValue"] = this.JSONValue;
                }
            }
            if (this.Key != null)
            {
                outputObject["Key"] = this.Key;
            }
            if (this.Updated != null)
            {
                outputObject["Updated"] = this.Updated.Value;
            }
            return outputObject;
        }

        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken applicationValue = inputObject["Application"];
                if (applicationValue != null && applicationValue.Type != JTokenType.Null)
                {
                    this.Application = ((string)applicationValue);
                }
                JToken createdValue = inputObject["Created"];
                if (createdValue != null && createdValue.Type != JTokenType.Null)
                {
                    this.Created = ((DateTimeOffset)createdValue);
                }
                JToken documentationValue = inputObject["Documentation"];
                if (documentationValue != null && documentationValue.Type != JTokenType.Null)
                {
                    this.Documentation = ((string)documentationValue);
                }
                JToken environmentValue = inputObject["Environment"];
                if (environmentValue != null && environmentValue.Type != JTokenType.Null)
                {
                    this.Environment = ((string)environmentValue);
                }
                JToken fullpathValue = inputObject["Fullpath"];
                if (fullpathValue != null && fullpathValue.Type != JTokenType.Null)
                {
                    this.Fullpath = ((string)fullpathValue);
                }
                JToken jSONValueValue = inputObject["JSONValue"];
                if (jSONValueValue != null && jSONValueValue.Type != JTokenType.Null)
                {
                    this.JSONValue = jSONValueValue;
                }
                JToken keyValue = inputObject["Key"];
                if (keyValue != null && keyValue.Type != JTokenType.Null)
                {
                    this.Key = ((string)keyValue);
                }
                JToken updatedValue = inputObject["Updated"];
                if (updatedValue != null && updatedValue.Type != JTokenType.Null)
                {
                    this.Updated = ((DateTimeOffset)updatedValue);
                }
                JToken identifier = inputObject["Id"];
                if (identifier != null && identifier.Type != JTokenType.Null)
                {
                    this.Id = ((string)identifier);
                }
            }
        }
    }
}
